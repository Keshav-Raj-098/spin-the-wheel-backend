generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model user {
  id            String         @id @unique @default(uuid())
  name          String
  email         String         @unique
  gender        String?
  age           String?
  points        Int            @default(0)
  spinLeft      Int            @default(0)
  Feedback      Feedback[]
  userQuestions UserQuestion[]
  userForms     UserForm[]
}

model admin {
  id                 String     @id @unique @default(uuid())
  username           String     @unique
  password           String
  lastSessionWinners Json?
  uniqueCode         String     @unique
  Feedback           Feedback[]
  forms              Form[]
  task               Task[]

}

model UserForm {
  id        String   @id @unique @default(uuid())
  userId    String
  formId    String
  createdAt DateTime @default(now())
  user      user     @relation(fields: [userId], references: [id])
  form      Form     @relation(fields: [formId], references: [id])

  @@unique([userId, formId])
}

model Task {
  id            Int      @id @default(autoincrement())
  adminId       String
  functionToRun String
  durationValue Int      @default(45)
  durationUnit  String   @default("minutes")
  isCompleted   Boolean  @default(false)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  admin         admin    @relation(fields: [adminId], references: [id])
}

model Form {
  id        String     @id @unique @default(uuid())
  adminId   String
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  name      String
  isSurvey  Boolean?
  admin     admin      @relation(fields: [adminId], references: [id])
  questions Question[]
  userForms UserForm[]
}

model Question {
  id            String         @id @unique @default(uuid())
  question      String
  formId        String
  createdAt     DateTime       @default(now())
  multiple      Boolean?       @default(false)
  textAllowed   Boolean?       @default(false)
  options       Options[]
  form          Form           @relation(fields: [formId], references: [id])
  userQuestions UserQuestion[]
}

model Options {
  id          String   @id @unique @default(uuid())
  option      String
  questionId  String
  markedCount Int      @default(0)
  createdAt   DateTime @default(now())
  isCorrect   Boolean  @default(false)
  question    Question @relation(fields: [questionId], references: [id])
}

model UserQuestion {
  id           String   @id @unique @default(uuid())
  userId       String
  questionId   String
  createdAt    DateTime @default(now())
  userResponse String?
  Question     Question @relation(fields: [questionId], references: [id])
  user         user     @relation(fields: [userId], references: [id])

  @@unique([userId, questionId])
}

model Feedback {
  id        String   @id @unique @default(uuid())
  userId    String
  adminId   String
  feedback  Json
  createdAt DateTime @default(now())
  admin     admin    @relation(fields: [adminId], references: [id])
  user      user     @relation(fields: [userId], references: [id])
}
