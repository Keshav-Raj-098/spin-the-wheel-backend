generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}
model user {
  id            String        @id @unique @default(uuid())
  name          String
  email         String        @unique
  gender        String?
  age           String?
  points        Int           @default(0)
  spinLeft      Int           @default(10) // Remove ? if you don't want it to be nullable
  formDone      String[]      @default([]) // Store completed form IDs in an array
  userQuestions UserQuestion[]
  Feedback      Feedback[]
}

model admin {
  id       String @id @unique @default(uuid())
  username String @unique
  password String
  lastSessionWinners Json?  
  forms    Form[]
  task     Task[]
  Feedback Feedback[]
}
model Task {
  id            Int      @id @default(autoincrement())
  adminId       String
  functionToRun String   // Identifier of the function to run
  durationValue Int      // Duration value (e.g., 2, 3, etc.)
  durationUnit  String   // Duration unit (e.g., 'minutes', 'hours', 'days')
  admin         admin    @relation(fields: [adminId], references: [id])
  isCompleted   Boolean  @default(false)
  createdAt     DateTime @default(now()) // Automatically set when the task is created
  updatedAt     DateTime @updatedAt      // Automatically updated whenever the task is modified
}




model Form {
  id        String     @id @unique @default(uuid())
  adminId   String
  name      String?
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  admin     admin      @relation(fields: [adminId], references: [id])
  questions Question[]
}

model Question {
  id          String        @id @unique @default(uuid())
  question    String
  formId      String
  multiple    Boolean?       @default(false)
  createdAt   DateTime      @default(now())
  options     Options[]
  form        Form          @relation(fields: [formId], references: [id])
  userQuestions UserQuestion[]
}

model Options {
  id          String   @id @unique @default(uuid())
  option      String
  questionId  String
  markedCount Int      @default(0)
  createdAt   DateTime @default(now())
  question    Question @relation(fields: [questionId], references: [id])
}

model UserQuestion {
  id         String   @id @unique @default(uuid())
  userId     String
  questionId String
  user       user     @relation(fields: [userId], references: [id])
  Question   Question @relation(fields: [questionId], references: [id])
  createdAt  DateTime @default(now()) // Add this line

  @@unique([userId, questionId]) // Only track that the user answered the question
}
model Feedback {
  id         String   @id @unique @default(uuid())
  userId     String   // Foreign key for the user
  adminId    String   // Foreign key for the admin
  feedback   Json     // Store feedback as JSON
  createdAt  DateTime @default(now())

  user       user     @relation(fields: [userId], references: [id])  // Relation to the user
  admin      admin    @relation(fields: [adminId], references: [id]) // Relation to the admin
}



